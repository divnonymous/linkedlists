#include <stdio.h>
#include <stdlib.h>

struct node{
    int data;
    struct node * next;
};

// TRAVERSAL

void printlist(struct node * ptr){
    while(ptr!=NULL){
        printf("Element is %d\n", ptr->data);
        ptr = ptr->next;
    }
    printf("\n");
}

//CASE 1 INSERT AT  FIRST

struct node * insert_first(struct node * head, int data){
    struct node * ptr = (struct node*)malloc(sizeof(struct node));


    ptr->next = head;
    ptr->data = data;
    return ptr;
}

// CASE 2 INSERT AT END

struct node * insert_end(struct node * head, int data){
    struct node * ptr = (struct node*)malloc(sizeof(struct node));
    struct node * p = head;
    ptr->data = data;

    while(p->next!=NULL){
        p=p->next;
    }

    p->next = ptr;
    ptr->next = NULL;

    return head;
}

//CASE 3 INSERT AT INDEX

struct node *insertAtIndex(struct node * head, int data, int index){
    struct node * ptr = (struct node*)malloc(sizeof(struct node));
    struct node * p = head;

    int i=0;

    while(i!=index-1){
        p=p->next;
        i++;
    }

    ptr->data=data;
    ptr->next=p->next;
    p->next=ptr;
}

// CASE 4 INSERT AFTER

struct node *insertion_after(struct node * head, struct node * prevnode, int data){
    struct node * ptr = (struct node*)malloc(sizeof(struct node));

    ptr->data = data;
    ptr->next = prevnode->next;
    prevnode->next = ptr;

    return head;
}

//DELETION BEGIN FROM HERE
//-------------------------
//CASE 1 --- DELETION AT FIRST

struct node * delete_first(struct node * head){
    struct node * ptr = head;
    head = head->next;
    free(ptr);

    return head;
}

//CASE 2 ----- DELETE AT END ----
struct node * delete_end(struct node * head){
    struct node * ptr = head;

    while(ptr->next->next != NULL){
        ptr = ptr->next;
    }
    ptr->next=NULL;
    return head;

}

int main() {

    struct node *head;
    struct node *first;
    struct node *second;
    struct node *third;
    struct node *fourth;

    head = (struct node *)malloc(sizeof(struct node));
    first = (struct node *)malloc(sizeof(struct node));
    second = (struct node *)malloc(sizeof(struct node));
    third = (struct node *)malloc(sizeof(struct node));
    fourth = (struct node *)malloc(sizeof(struct node));

    head->data=4;
    head->next=first;

    first->data=10;
    first->next=second;

    second->data=16;
    second->next=third;

    third->data=98;
    third->next=fourth;

    fourth->data=74;
    fourth->next=NULL;


    while(1){
        printf("What would you like to do\n");
        printf("1 for Traversal\n");
        printf("2 for Insertion at start\n");
        printf("3 for Insertion at end\n");
        printf("4 for Insertion at Index\n");
        printf("5 for Deletion at start\n");
        printf("6 for Deletion at end\n\n");

        int i;
        scanf("%d", &i);

        if(i==1){
            printlist(head);
        }
        else if(i==2){
            int data;
            printf("Enter the number you want to insert");
            scanf("%d", &data);
            head = insert_first(head, data);
            printlist(head);
        }
        else if(i==3){
            int data;
            printf("Enter the number you want to insert");
            scanf("%d", &data);
            head = insert_end(head, data);
            printlist(head);

        }
        else if(i==4){
            int data, index;
            printf("Enter the number you want to insert\n");
            scanf("%d", &data);
            printf("Enter the number you want to insert\n");
            scanf("%d", &index);
            head = insertAtIndex(head, data, index);
            printlist(head);

        }
        else if(i==5){
            head = delete_first(head);
            printlist(head);

        }
        else if(i==6){
            head = delete_end(head);
            printlist(head);
        }

        else{
            printf("Wrong Input Entered");
        }

    }

}
